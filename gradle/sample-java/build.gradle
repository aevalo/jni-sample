plugins {
  id 'application'
  id 'distribution'
}

repositories {
  jcenter()
}

dependencies {
  implementation 'org.scijava:native-lib-loader:2.3.5'
  // Use TestNG framework, also requires calling test.useTestNG() below
  testImplementation 'org.testng:testng:7.3.0'
}

group = 'org.example.java'
version = '0.1'

application {
  mainClass = 'org.example.java.Sample1'
}

jar {
  dependsOn ':jnilib:linkReleaseLinux'
  from(tasks.getByPath(':jnilib:linkReleaseLinux').outputs) {
    duplicatesStrategy 'exclude'
    into getPlatformLibraryPath()
  }
  manifest {
    attributes (
      'Main-Class': 'org.example.java.Sample1'
    )
  }
}

distributions {
  main {
    startScripts {
      defaultJvmOpts << '-Djava.library.path=$APP_HOME/' + getPlatformLibraryPath()
    }
    contents {
      duplicatesStrategy 'exclude'
      from(tasks.getByPath(':nativelib:linkReleaseLinux').outputs) {
        into getPlatformLibraryPath()
      }
    }
  }
}

task copyNativeLibs(type: Copy) {
  dependsOn ':nativelib:linkDebugLinux'
  dependsOn ':jnilib:linkDebugLinux'
  duplicatesStrategy 'exclude'
  from(tasks.getByPath(':nativelib:linkDebugLinux').outputs)
  from(tasks.getByPath(':jnilib:linkDebugLinux').outputs)
  into "build/${getPlatformLibraryPath()}"
}

test {
  dependsOn copyNativeLibs
  systemProperty 'java.library.path', "build/${getPlatformLibraryPath()}"
  useTestNG()
}

run {
  dependsOn copyNativeLibs
  systemProperty 'java.library.path', "build/${getPlatformLibraryPath()}"
}
