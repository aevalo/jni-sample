plugins {
  id 'scala'
  id 'application'
  id 'distribution'
}

repositories {
  jcenter()
}

dependencies {
  implementation 'org.scala-lang:scala-library:2.13.3'
  implementation 'org.scijava:native-lib-loader:2.3.5'

  // Use Scalatest for testing our library
  testImplementation 'junit:junit:4.13'
  testImplementation 'org.scalatest:scalatest_2.13:3.2.2'
  testImplementation 'org.scalatestplus:junit-4-12_2.13:3.2.2.0'

  // Need scala-xml at test runtime
  testRuntimeOnly 'org.scala-lang.modules:scala-xml_2.13:1.2.0'
}

group = 'org.example.scala'
version = '0.1'

application {
  mainClass = 'org.example.scala.Sample1'
}

jar {
  dependsOn ':jnilib:linkReleaseLinux'
  from(tasks.getByPath(':jnilib:linkReleaseLinux').outputs) {
    duplicatesStrategy 'exclude'
    into getPlatformLibraryPath()
  }
  manifest {
    attributes (
      'Main-Class': 'org.example.scala.Sample1'
    )
  }
}

distributions {
  main {
    startScripts {
      defaultJvmOpts = ["-Djava.library.path=\$APP_HOME/${getPlatformLibraryPath()}"]
    }
    contents {
      duplicatesStrategy 'exclude'
      from(tasks.getByPath(':nativelib:linkReleaseLinux').outputs) {
        into getPlatformLibraryPath()
      }
    }
  }
}

task copyNativeLibs(type: Copy) {
  dependsOn ':nativelib:linkDebugLinux'
  dependsOn ':jnilib:linkDebugLinux'
  duplicatesStrategy 'exclude'
  from(tasks.getByPath(':nativelib:linkDebugLinux').outputs)
  from(tasks.getByPath(':jnilib:linkDebugLinux').outputs)
  into "build/${getPlatformLibraryPath()}"
}

test {
  dependsOn copyNativeLibs
  systemProperty 'java.library.path', "build/${getPlatformLibraryPath()}"
  useTestNG()
}

run {
  dependsOn copyNativeLibs
  systemProperty 'java.library.path', "build/${getPlatformLibraryPath()}"
}
